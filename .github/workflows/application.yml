name: Application

on:
    push: ~
    pull_request: ~
    release:
        types: [created]
    schedule:
        -
            cron: "0 1 * * 6" # Run at 1am every Saturday

jobs:
    static-checks:
        runs-on: ubuntu-latest

        name: "Static checks (PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }})"

        strategy:
            fail-fast: false
            matrix:
                include:
                    -
                        php: 7.4
                        symfony: 4.4.*
                    -
                        php: 7.4
                        symfony: 5.2.*
                    -
                        php: 8.0
                        symfony: 5.2.*

        steps:
            -
                uses: actions/checkout@v2

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    ini-values: date.timezone=Europe/Warsaw, opcache.enable=1, opcache.enable_cli=1, opcache.memory_consumption=256, opcache.max_accelerated_files=32531, opcache.interned_strings_buffer=8, opcache.validate_timestamps=0, opcache.save_comments=1, opcache.fast_shutdown=0
                    extensions: intl, gd, opcache, mysql, pdo_mysql, :xdebug
                    tools: symfony
                    coverage: none

            -
                name: Restrict Symfony version
                if: matrix.symfony != ''
                run: composer config extra.symfony.require "${{ matrix.symfony }}"

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-

            -
                name: Install PHP dependencies
                run: composer update --no-interaction --no-scripts
                id: end-of-setup

            -
                name: Validate composer.json
                run: composer validate --strict
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Check for security vulnerabilities
                run: symfony security:check || true
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Validate coding standard
                run: make validate-coding-standard
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Validate Twig templates
                run: make validate-twig
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Validate Yaml files
                run: make validate-yaml-files
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Validate Package versions
                run: make validate-package-version

            -
                name: Run Psalm
                run: make test-psalm
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Run PHPStan
                run: make test-phpstan
                if: always() && steps.end-of-setup.outcome == 'success'

    test-application-without-frontend:
        runs-on: ubuntu-18.04

        name: "Test non-JS application (PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, MySQL ${{ matrix.mysql }})"

        strategy:
            fail-fast: false
            matrix:
                include:
                    -
                        php: 7.4
                        symfony: 4.4.*
                        mysql: 5.7
                    -
                        php: 7.4
                        symfony: 5.2.*
                        mysql: 5.7
                    -
                        php: 8.0
                        symfony: 5.2.*
                        mysql: 5.7

        env:
            APP_ENV: test
            DATABASE_URL: "mysql://root:root@127.0.0.1/monofony?serverVersion=${{ matrix.mysql }}"

        steps:
            -   uses: actions/checkout@v2

            -
                name: Shutdown default MySQL
                run: sudo service mysql stop

            -
                name: Setup MySQL
                uses: mirromutth/mysql-action@v1.1
                with:
                    mysql version: "${{ matrix.mysql }}"
                    mysql root password: "root"

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    ini-values: date.timezone=Europe/Paris, opcache.enable=1, opcache.enable_cli=1, opcache.memory_consumption=256, opcache.max_accelerated_files=32531, opcache.interned_strings_buffer=8, opcache.validate_timestamps=0, opcache.save_comments=1, opcache.fast_shutdown=0
                    extensions: intl, gd, opcache, mysql, pdo_mysql, :xdebug
                    tools: symfony
                    coverage: none

            -
                name: Restrict Symfony version
                if: matrix.symfony != ''
                run: composer config extra.symfony.require "${{ matrix.symfony }}"

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-

            -
                name: Install dependencies
                if: steps.composer-cache.outputs.cache-hit != 'true'
                run: composer update --no-interaction --no-scripts

            -
                name: Dump the environment
                run: |
                    echo "DATABASE_URL=$DATABASE_URL" >> .env.$APP_ENV
                    composer dump-env $APP_ENV

            -
                name: Cache Node packages
                uses: actions/cache@v2
                with:
                    path: '**/node_modules'
                    key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

            -
                name: Install node packages
                if: steps.yarn-cache.outputs.cache-hit != 'true'
                run: |
                    yarn install
                    yarn build

            -
                name: Warmup cache
                run: bin/console cache:warmup

            -   name: Prepare application database
                run: |
                    APP_DEBUG=1 bin/console doctrine:database:create -vvv
                    bin/console doctrine:migrations:migrate -n -vvv

            -
                name: Test provided migrations
                run: make test-doctrine-migrations

            -
                name: Test installer
                run: make test-installer

            -
                name: Load fixtures
                run: make test-fixtures

            -
                name: Run PHPSpec
                run: make test-phpspec

            -
                name: Run PHPUnit
                run: make test-phpunit

            -
                name: Run CLI Behat
                run: make test-behat-with-cli

            -
                name: Run non-JS Behat
                run: make test-behat-without-javascript

            -
                name: Upload Behat logs
                uses: actions/upload-artifact@v2
                if: failure()
                with:
                    name: "Behat logs (non-JS, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }})"
                    path: etc/build/
                    if-no-files-found: ignore

    test-application-with-frontend:
        runs-on: ubuntu-18.04

        name: "Test JS application (PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, MySQL ${{ matrix.mysql }})"

        timeout-minutes: 25

        strategy:
            fail-fast: false
            matrix:
                include:
                    -
                        php: 7.4
                        symfony: 4.4.*
                        mysql: 5.7
                        node: 10.x
                    -
                        php: 7.4
                        symfony: 5.2.*
                        mysql: 5.7
                        node: 10.x
                    -
                        php: 8.0
                        symfony: 5.2.*
                        mysql: 5.7
                        node: 10.x

        env:
            APP_ENV: test
            DATABASE_URL: "mysql://root:root@127.0.0.1/monofony?serverVersion=${{ matrix.mysql }}"

        steps:
            -
                uses: actions/checkout@v2

            -
                name: Shutdown default MySQL
                run: sudo service mysql stop

            -
                name: Setup MySQL
                uses: mirromutth/mysql-action@v1.1
                with:
                    mysql version: "${{ matrix.mysql }}"
                    mysql root password: "root"

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    ini-values: date.timezone=Europe/Paris, opcache.enable=1, opcache.enable_cli=1, opcache.memory_consumption=256, opcache.max_accelerated_files=32531, opcache.interned_strings_buffer=8, opcache.validate_timestamps=0, opcache.save_comments=1, opcache.fast_shutdown=0
                    extensions: intl, gd, opcache, mysql, pdo_mysql, :xdebug
                    tools: symfony
                    coverage: none

            -
                name: Restrict Symfony version
                if: matrix.symfony != ''
                run: composer config extra.symfony.require "${{ matrix.symfony }}"

            -
                name: Restrict Symfony version
                if: matrix.symfony != ''
                run: composer config extra.symfony.require "${{ matrix.symfony }}"

            -
                name: Install certificates
                run: symfony server:ca:install

            -
                name: Run Chrome Headless
                run: google-chrome-stable --enable-automation --disable-background-networking --no-default-browser-check --no-first-run --disable-popup-blocking --disable-default-apps --disable-translate --disable-extensions --no-sandbox --enable-features=Metal --headless --remote-debugging-port=9222 --window-size=2880,1800 --proxy-server='direct://' --proxy-bypass-list='*' https://127.0.0.1 > /dev/null 2>&1 &

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-

            -
                name: Install PHP dependencies
                run: composer update --no-interaction --no-scripts

            -
                name: Setup Node
                uses: actions/setup-node@v1
                with:
                    node-version: "${{ matrix.node }}"

            -
                name: Get Yarn cache directory
                id: yarn-cache
                run: echo "::set-output name=dir::$(yarn cache dir)"

            -
                name: Cache Yarn
                uses: actions/cache@v2
                with:
                    path: ${{ steps.yarn-cache.outputs.dir }}
                    key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-node-${{ matrix.node }}-yarn-

            -
                name: Install JS dependencies
                run: yarn install

            -
                name: Validate Yarn packages
                run: yarn check

            -
                name: Dump the environment
                run: |
                    echo "DATABASE_URL=$DATABASE_URL" >> .env.$APP_ENV
                    composer dump-env $APP_ENV

            -
                name: Warmup cache
                run: bin/console cache:warmup

            -
                name: Run webserver
                run: symfony server:start --port=8080 --dir=public --daemon

            -
                name: Prepare application database
                run: |
                    APP_DEBUG=1 bin/console doctrine:database:create -vvv
                    bin/console doctrine:migrations:migrate -n -vvv

            -
                name: Build assets
                run: |
                    bin/console assets:install public -vvv
                    yarn build

            -
                name: Run JS Behat
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript && ~@todo && ~@cli" || vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript && ~@todo && ~@cli" --rerun || vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript && ~@todo && ~@cli" --rerun

            -
                name: Upload Behat logs
                uses: actions/upload-artifact@v2
                if: failure()
                with:
                    name: "Behat logs (JS, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }})"
                    path: etc/build/
                    if-no-files-found: ignore
